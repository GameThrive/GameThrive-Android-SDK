# GameThrive Android SDK API

List of Constructors
---
- [`GameThrive`](#GameThriveConstructor)

List of Methods
----------
- [`sendTag`](#sendTag)
- [`sendTags`](#sendTags)
- [`getTags`](#getTags)
- [`deleteTag`](#deleteTag)
- [`deleteTags`](#deleteTags)
- [`sendPurchase`](#sendPurchase)
- [`idsAvailable`](#idsAvailable)
- [`onPaused`](#onPaused)
- [`onResumed`](#onResumed)

List of Handlers Interfaces
-----
- [`NotificationOpenedHandler`](#NotificationOpenedHandler)
- [`IdsAvailableHandler`](#IdsAvailableHandler)
- [`GetTagsHandler`](#GetTagsHandler)


## Constructors
<a name="GameThriveConstructor" />
#### GameThrive

- __Parameters__
 - __`Activity` _context___ - Pass in your main `Activity` so the api can use it as a `Context`.
 - __`String` _googleProjectNumber___ - Your Google project number
 - __`String` _gameThriveAppId___ - Your GameThrive app id
 - __`NotificationOpenedHandler` _notificationOpenedHandler___ - Calls `notificationOpened` on the object when a notification is opened or one is received while the game is running.

 
- __Example__

	````java
	public class MainActivity extends Activity implements NotificationOpenedHandler {
		@Override
		protected void onCreate(Bundle savedInstanceState) {
			gameThrive = new GameThrive(this, "703322744261", "5eb5a37e-b458-11e3-ac11-000c2940e62c", this);
		}
	}
	````

## Methods
<a name="sendTag" />
#### sendTag
Tag a player based on a game event of your choosing so later you can create segments on [gamethrive.com](https://gamethrive.com) to target these players. Recommend using sendTags over sendTag if you need to set more than one tag on a player at a time.

- __Parameters__
 - __`String` _key___ - Key of your choosing to create or update.
 - __`String` _value___ -  Value to set on the key.
   - _NOTE:_ Passing in a blank String deletes the key, you can also call deleteTag or deleteTags.

 
- __Example__

	````java
	gameThrive.sendTag("key", "value");
	````

<a name="sendTags" />
#### sendTags
Tag a player based on a game event of your choosing so later you can create segments on [gamethrive.com](https://gamethrive.com) to target these players.

- __Parameters__
 - __`JSONObject` _keyValues___ - Key value pairs of your choosing to create or update.
   - _NOTE:_ Passing in a blank String as a value deletes the key, you can also call deleteTag or deleteTags.

 
- __Example__

	````java
	JSONObject tags = new JSONObject();
	tags.put("key1", "value1");
	tags.put("key2", "value2");
	gameThrive.sendTags(tags);
	````

<a name="getTags" />
#### getTags
Retrieve a list of tags that have been set on the player from the GameThrive server.

- __Parameters__
 - __`GetTagsHandler` _handler___ - Calls `tagsAvailable` on the Object once the tags are available.
   

 
- __Example__

	````java
	gameThrive.getTags(new GetTagsHandler() {
		@Override
		public void tagsAvailable(JSONObject tags) {
			Log.d("debug", tags.toString());
		}
	});
	````

<a name="deleteTag" />
#### deleteTag
Deletes a tag that was previously set on a player with `sendTag` or `sendTags`. Use `deleteTags` if you need to delete more than one.

- __Parameters__
 - __`String` _key___ - Key to remove.
   
 
- __Example__

	````java
	gameThrive.deleteTag("key");
	````

<a name="deleteTags" />
#### deleteTags
Deletes tags that were previously set on a player with `sendTag` or `sendTags`.

- __Parameters__
 - __`Collection<String>` _keys___ - Keys to remove.
   
 
- __Example__

	````java
	Collection<String> tempList = new ArrayList<String>();
	tempList.add(key);
	gameThrive.deleteTags(tempList);
	````

<a name="sendPurchase" />
#### sendPurchase
Call this method when a user completes an in-app purchase, and provide the amount spent in USD. This can later be used to target free vs paid users when sending a push notification.

- __Parameters__
 - __(`BigDecimal`  OR `double`)  _amount___ - Amount spent in USD.
   
- __Example__

	````java
	gameThrive.sendPurchase(1.23d);
	````



<a name="idsAvailable" />
#### idsAvailable
Lets you retrieve the GameThrive player id and device token. Your hanlder is called after the device is successfully registered with GameThrive.

- __Parameters__
 - __`IdsAvailableHandler`  _handler___ -  Calls `tagsAvailable` on the Object when the player id is available.

- __Example__

	````java
	gameThrive.idsAvailable(new IdsAvailableHandler() {
		@Override
		public void idsAvailable(String playerId, String registrationId) {
			Log.d("debug", "Player:" + playerId);
			if (registrationId != null)
				Log.d("debug", "registrationId:" + registrationId);
		}
	});
	````


<a name="onPaused" />
#### onPaused
Tells GameThrive that the user is no longer in your app. This is used to track playtime of your game and when to show a notification in the notification area or to just call your `NotificationOpenedHandler`. So make sure to place this and `onResume` in each of your `Activity` classes.

- __Example__

	````java
	@Override
	protected void onPause() {
		super.onPause();
		gameThrive.onPaused();
	}
	````

<a name="onResumed" />
#### onResumed
Tells GameThrive that the user returned to your app. This is used to track playtime of your game and when to show a notification in the notification area or to just call your `NotificationOpenedHandler`. So make sure to place this and `onPaused` in each of your `Activity` classes.
 
- __Example__

	````java
	@Override
	protected void onResume() {
		super.onResume();
		gameThrive.onResumed();
	}
	````


## Handler Interfaces

<a name="NotificationOpenedHandler" />
#### NotificationOpenedHandler
Interface containing the method `notificationOpened` which you can implement to process information on the notification the user just opened.

#### notificationOpened
   -  __Parameters__
     - __`String` _message___ - The message text the user seen in the notification.
     - __`JSONObject` _additionalData___ - Key value pairs that were set on the notification.
     - __`boolean` _isActive___ - True if your app was currently being used when a notification came in.
   
 
- __Example__

	````java
	@Override
	public void notificationOpened(String message, JSONObject additionalData, boolean isActive) {
		String messageTitle;
		AlertDialog.Builder builder = null;
		
		if (additionalData != null) {
			if (additionalData.has("discount"))
				messageTitle = "Discount!";
			else if (additionalData.has("bonusCredits"))
				messageTitle = "Bonus Credits!";
			else
				messageTitle = "Other Extra Data";
			
			builder = new AlertDialog.Builder(this)
					.setTitle(messageTitle)
					.setMessage(message + "\n\n" + additionalData.toString());
		}
		else if (isActive) // If a push notification is received when the app is being used it does not display in the notification bar so display in the app.
			builder = new AlertDialog.Builder(this)
					.setTitle("GameThrive Message")
					.setMessage(message);
		
		// Add your game logic around this so the user is not interrupted during gameplay.
		if (builder != null)
			builder.setCancelable(true)
				   .setPositiveButton("OK",null)
				   .create().show();
	}
	````

<a name="IdsAvailableHandler" />
#### IdsAvailableHandler
Interface which you can implement and pass to `GameThrive.idsAvailable` to get the GameThrive playerId and the Google registration Id.

#### idsAvailable
   - __Parameters__
     - __`String` _playerId___ - GameThrive playerId is a UUID formatted string.(_unique per device per app_)
     - __`String` _registrationId___ - RegistrationI Id is a Google assigned identifier(_unique per device per app_).
      - _NOTE:_ Might be `null` if Google play services are not installed  on the device or there was a connection issue.
   
 
- __Example__

	````java
	gameThrive.idsAvailable(new IdsAvailableHandler() {
	   @Override
	   public void idsAvailable(String playerId, String registrationId) {
		  Log.d("debug", "Player:" + playerId);
		  if (registrationId != null)
			  Log.d("debug", "registrationId:" + registrationId);
	   }
	});
	````

<a name="GetTagsHandler" />
#### GetTagsHandler
Interface which you can implement and pass to `GameThrive.getTags` to get the all the tags set on a player from gamethrive.com.

#### tagsAvailable
   - __Parameters__
     - __`JSONObject` _tags___ - JSONObject of key value pairs retrieved from the GameThrive server
   
 
- __Example__

	````java
	gameThrive.getTags(new GetTagsHandler() {
		@Override
		public void tagsAvailable(JSONObject tags) {
			Log.d("debug","Current Tags on Player:" + tags.toString());
		}
	});
	````
	